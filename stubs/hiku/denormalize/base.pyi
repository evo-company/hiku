from ..graph import Graph as Graph
from ..query import Field as Field, Link as Link, Node as Node, QueryVisitor as QueryVisitor
from ..result import Proxy as Proxy
from ..types import OptionalMeta as OptionalMeta, RecordMeta as RecordMeta, SequenceMeta as SequenceMeta, TypeRefMeta as TypeRefMeta, get_type as get_type
from typing import Dict

class Denormalize(QueryVisitor):
    def __init__(self, graph: Graph, result: Proxy) -> None: ...
    def process(self, query: Node) -> Dict: ...
    def visit_field(self, obj: Field) -> None: ...
    def visit_link(self, obj: Link) -> None: ...
