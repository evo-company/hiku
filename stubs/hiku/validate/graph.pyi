from ..directives import Deprecated as Deprecated
from ..graph import AbstractField as AbstractField, AbstractLink as AbstractLink, AbstractNode as AbstractNode, AbstractOption as AbstractOption, Field as Field, Graph as Graph, GraphVisitor as GraphVisitor, Link as Link, Node as Node, Option as Option, Root as Root
from .errors import Errors as Errors
from _typeshed import Incomplete
from typing import Any, List, Optional, Union

class GraphValidationError(TypeError):
    errors: Incomplete
    def __init__(self, errors: List[str]) -> None: ...

class GraphValidator(GraphVisitor):
    class _NameFormatter(GraphVisitor):
        def visit_node(self, obj: Node) -> Optional[str]: ...
        def visit_root(self, obj: Root) -> str: ...
        def visit_link(self, obj: Link) -> str: ...
        def visit_field(self, obj: Field) -> str: ...
        def visit_option(self, obj: Option) -> str: ...
    items: Incomplete
    errors: Incomplete
    def __init__(self, items: List[Node]) -> None: ...
    @classmethod
    def validate(cls, items: List[Node]) -> None: ...
    def push_ctx(self, obj: Union[Node, Link, Field]) -> Any: ...
    @property
    def ctx(self) -> Union[Node, Link, Field]: ...
    def visit_option(self, obj: Option) -> None: ...
    def visit_field(self, obj: Field) -> None: ...
    def visit_link(self, obj: Link) -> None: ...
    def visit_node(self, obj: Node) -> None: ...
    def visit_root(self, obj: Root) -> None: ...
    def visit_graph(self, obj: Graph) -> None: ...
    def visit_graph_items(self, items: List[Node]) -> None: ...
