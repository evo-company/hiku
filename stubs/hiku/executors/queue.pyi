from hiku.executors.base import BaseExecutor as BaseExecutor
from hiku.result import Proxy as Proxy
from typing import Any, Callable, Iterable, List, Optional, Union
from typing_extensions import Protocol

class SubmitRes(Protocol):
    def result(self) -> Any: ...

class Workflow:
    def result(self) -> Proxy: ...

class TaskSet:
    def __init__(self, queue: Queue) -> None: ...
    def submit(self, fn: Callable, *args: Any, **kwargs: Any) -> SubmitRes: ...

class Queue:
    def __init__(self, executor: BaseExecutor) -> None: ...
    @property
    def __futures__(self) -> List: ...
    def progress(self, done: Iterable) -> None: ...
    def submit(self, task_set: TaskSet, fn: Callable, *args: Any, **kwargs: Any) -> SubmitRes: ...
    def fork(self, from_: Optional['TaskSet']) -> TaskSet: ...
    def add_callback(self, obj: Union[SubmitRes, 'TaskSet'], callback: Callable) -> None: ...
