import typing as t
from graphql.language import ast
from hiku.directives import Deprecated as Deprecated
from hiku.federation.directive import Extends as Extends, External as External, Key as Key, Provides as Provides, Requires as Requires
from hiku.graph import Field as Field, Graph as Graph, GraphTransformer as GraphTransformer, GraphVisitor as GraphVisitor, Link as Link, Node as Node, Nothing as Nothing, Option as Option, Root as Root
from hiku.types import AnyMeta as AnyMeta, BooleanMeta as BooleanMeta, FloatMeta as FloatMeta, GenericMeta as GenericMeta, IntegerMeta as IntegerMeta, OptionalMeta as OptionalMeta, Record as Record, SequenceMeta as SequenceMeta, StringMeta as StringMeta, TypeRefMeta as TypeRefMeta
from typing import List

@t.overload
def coerce_type(x: str) -> ast.NameNode: ...
@t.overload
def coerce_type(x: ast.Node) -> ast.Node: ...

class Exporter(GraphVisitor):
    def export_record(self, type_name: str, obj: t.Type[Record]) -> ast.ObjectTypeDefinitionNode: ...
    def visit_graph(self, obj: Graph) -> List[ast.DefinitionNode]: ...
    def get_any_type(self) -> ast.ScalarTypeDefinitionNode: ...
    def visit_root(self, obj: Root) -> ast.ObjectTypeExtensionNode: ...
    def visit_field(self, obj: Field) -> ast.FieldDefinitionNode: ...
    def visit_node(self, obj: Node) -> ast.ObjectTypeDefinitionNode: ...
    def visit_link(self, obj: Link) -> ast.FieldDefinitionNode: ...
    def visit_option(self, obj: Option) -> ast.InputValueDefinitionNode: ...
    def visit_key_directive(self, obj: Key) -> ast.DirectiveNode: ...
    def visit_provides_directive(self, obj: Provides) -> ast.DirectiveNode: ...
    def visit_requires_directive(self, obj: Requires) -> ast.DirectiveNode: ...
    def visit_external_directive(self, obj: External) -> ast.DirectiveNode: ...
    def visit_extends_directive(self, obj: Extends) -> ast.DirectiveNode: ...
    def visit_deprecated_directive(self, obj: Deprecated) -> ast.DirectiveNode: ...

def get_ast(graph: Graph) -> ast.DocumentNode: ...

class _StripGraph(GraphTransformer):
    def visit_root(self, obj: Root) -> Root: ...
    def visit_graph(self, obj: Graph) -> Graph: ...
    def visit_node(self, obj: Node) -> Node: ...

def print_sdl(graph: Graph) -> str: ...
