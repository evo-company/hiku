from ..graph import GraphTypes as GraphTypes
from ..types import Any as Any, GenericMeta as GenericMeta, MappingMeta as MappingMeta, OptionalMeta as OptionalMeta, Record as Record, RecordMeta as RecordMeta, SequenceMeta as SequenceMeta
from .types import TypeDef as TypeDef
from _typeshed import Incomplete

class TypeDoc:
    __type__: Incomplete
    __type_description__: Incomplete
    def __init__(self, type_, description) -> None: ...
    def __getattr__(self, name): ...

class GraphTypesEx(GraphTypes):
    def visit(self, obj): ...
    def visit_graph(self, obj): ...
    def visit_node(self, obj): ...
    def visit_root(self, obj): ...

class _LinePrinter:
    def visit(self, type_): ...
    def visit_boolean(self, type_): ...
    def visit_string(self, type_): ...
    def visit_integer(self, type_): ...
    def visit_float(self, type_): ...
    def visit_typeref(self, type_): ...
    def visit_any(self, type_): ...

class _IndentedPrinter:
    def __init__(self) -> None: ...
    @classmethod
    def dumps(cls, types): ...
    def visit(self, type_) -> None: ...
    def visit_typedef(self, type_) -> None: ...
    def visit_record(self, type_) -> None: ...
    def visit_sequence(self, type_) -> None: ...
    def visit_mapping(self, type_) -> None: ...
    def visit_optional(self, type_) -> None: ...

def dumps(graph): ...
