import typing as t
from ..directives import get_deprecated as get_deprecated
from ..graph import Field as Field, Graph as Graph, GraphTransformer as GraphTransformer, GraphVisitor as GraphVisitor, Link as Link, Node as Node, Nothing as Nothing, NothingType as NothingType, Option as Option, Root as Root
from ..types import AbstractTypeVisitor as AbstractTypeVisitor, Any as Any, AnyMeta as AnyMeta, Boolean as Boolean, BooleanMeta as BooleanMeta, CallableMeta as CallableMeta, FloatMeta as FloatMeta, IntegerMeta as IntegerMeta, MappingMeta as MappingMeta, Optional as Optional, OptionalMeta as OptionalMeta, RecordMeta as RecordMeta, Sequence as Sequence, SequenceMeta as SequenceMeta, String as String, StringMeta as StringMeta, TypeRef as TypeRef, TypeRefMeta as TypeRefMeta, TypeVisitor as TypeVisitor
from ..utils import cached_property as cached_property, listify as listify
from .types import DIRECTIVE as DIRECTIVE, DirectiveArgIdent as DirectiveArgIdent, FieldArgIdent as FieldArgIdent, FieldIdent as FieldIdent, HashedNamedTuple as HashedNamedTuple, INPUT_OBJECT as INPUT_OBJECT, InputObjectFieldIdent as InputObjectFieldIdent, LIST as LIST, NON_NULL as NON_NULL, OBJECT as OBJECT, SCALAR as SCALAR
from _typeshed import Incomplete
from collections import OrderedDict

class Directive:
    class Argument:
        name: str
        type_ident: t.Any
        description: str
        default_value: t.Any
        def __init__(self, name, type_ident, description, default_value) -> None: ...
    name: str
    locations: t.List[str]
    description: str
    args: t.List[Argument]
    @property
    def args_map(self) -> OrderedDict: ...
    def __init__(self, name, locations, description, args) -> None: ...

QUERY_ROOT_NAME: str
MUTATION_ROOT_NAME: str

class SchemaInfo:
    query_graph: Incomplete
    data_types: Incomplete
    mutation_graph: Incomplete
    directives: Incomplete
    def __init__(self, query_graph: Graph, mutation_graph: t.Optional[Graph] = ..., directives: t.Optional[t.Sequence[Directive]] = ...) -> None: ...
    def directives_map(self) -> OrderedDict: ...

class TypeIdent(AbstractTypeVisitor):
    def __init__(self, graph: Graph, input_mode: bool = ...) -> None: ...
    def visit_any(self, obj: AnyMeta) -> HashedNamedTuple: ...
    def visit_mapping(self, obj: MappingMeta) -> HashedNamedTuple: ...
    def visit_record(self, obj: RecordMeta) -> HashedNamedTuple: ...
    def visit_callable(self, obj: CallableMeta) -> t.NoReturn: ...
    def visit_sequence(self, obj: SequenceMeta) -> HashedNamedTuple: ...
    def visit_optional(self, obj: OptionalMeta) -> HashedNamedTuple: ...
    def visit_typeref(self, obj: TypeRefMeta) -> HashedNamedTuple: ...
    def visit_string(self, obj: StringMeta) -> HashedNamedTuple: ...
    def visit_integer(self, obj: IntegerMeta) -> HashedNamedTuple: ...
    def visit_float(self, obj: FloatMeta) -> HashedNamedTuple: ...
    def visit_boolean(self, obj: BooleanMeta) -> HashedNamedTuple: ...

class UnsupportedGraphQLType(TypeError): ...

class TypeValidator(TypeVisitor):
    @classmethod
    def is_valid(cls, type_: t.Any) -> bool: ...
    def visit_any(self, obj: AnyMeta) -> t.NoReturn: ...
    def visit_record(self, obj: RecordMeta) -> t.NoReturn: ...

def not_implemented(*args: t.Any, **kwargs: t.Any) -> t.NoReturn: ...
def na_maybe(schema: SchemaInfo) -> NothingType: ...
def na_many(schema: SchemaInfo, ids: t.Optional[t.List] = ..., options: t.Optional[t.Any] = ...) -> t.List[t.List]: ...
def schema_link(schema: SchemaInfo) -> None: ...
def type_link(schema: SchemaInfo, options: t.Dict) -> t.Union[HashedNamedTuple, NothingType]: ...
def root_schema_types(schema: SchemaInfo) -> t.Iterator[HashedNamedTuple]: ...
def root_schema_query_type(schema: SchemaInfo) -> HashedNamedTuple: ...
def root_schema_mutation_type(schema: SchemaInfo) -> t.Union[HashedNamedTuple, NothingType]: ...
def root_schema_directives(schema: SchemaInfo) -> t.List[HashedNamedTuple]: ...
def type_info(schema: SchemaInfo, fields: t.List[Field], ids: t.List) -> t.Iterator[t.List[t.Optional[t.Dict]]]: ...
def type_fields_link(schema: SchemaInfo, ids: t.List, options: t.List) -> t.Iterator[t.List[HashedNamedTuple]]: ...
def type_of_type_link(schema: SchemaInfo, ids: t.List) -> t.Iterator[t.Union[HashedNamedTuple, NothingType]]: ...
def field_info(schema: SchemaInfo, fields: t.List[Field], ids: t.List) -> t.Iterator[t.List[t.Dict]]: ...
def field_type_link(schema: SchemaInfo, ids: t.List) -> t.Iterator[HashedNamedTuple]: ...
def field_args_link(schema: SchemaInfo, ids: t.List) -> t.Iterator[t.List[HashedNamedTuple]]: ...
def type_input_object_input_fields_link(schema: SchemaInfo, ids: t.List) -> t.Iterator[t.List[HashedNamedTuple]]: ...
def input_value_info(schema: SchemaInfo, fields: t.List[Field], ids: t.List) -> t.Iterator[t.List[t.Dict]]: ...
def input_value_type_link(schema: SchemaInfo, ids: t.List) -> t.Iterator[HashedNamedTuple]: ...
def directive_value_info(schema: SchemaInfo, fields: t.List[Field], ids: t.List) -> t.Iterator[t.List[Any]]: ...
def directive_args_link(schema: SchemaInfo, ids: t.List) -> t.List[t.List[HashedNamedTuple]]: ...

GRAPH: Incomplete

class ValidateGraph(GraphVisitor):
    def __init__(self) -> None: ...
    @classmethod
    def validate(cls, graph: Graph) -> None: ...
    def visit_node(self, obj: Node) -> None: ...
    def visit_root(self, obj: Root) -> None: ...
    def visit_field(self, obj: Field) -> None: ...
    def visit_link(self, obj: Link) -> None: ...
    def visit_option(self, obj: Option) -> None: ...

class BindToSchema(GraphTransformer):
    schema: Incomplete
    def __init__(self, schema: SchemaInfo) -> None: ...
    def visit_field(self, obj: Field) -> Field: ...
    def visit_link(self, obj: Link) -> Link: ...

class MakeAsync(GraphTransformer):
    def __init__(self) -> None: ...
    def visit_field(self, obj: Field) -> Field: ...
    def visit_link(self, obj: Link) -> Link: ...

def type_name_field_func(node_name: str, fields: t.List[Field], ids: t.Optional[t.List] = ...) -> t.List: ...

class AddIntrospection(GraphTransformer):
    introspection_graph: Incomplete
    type_name_field_factory: Incomplete
    def __init__(self, introspection_graph: Graph, type_name_field_factory: t.Callable) -> None: ...
    def visit_node(self, obj: Node) -> Node: ...
    def visit_root(self, obj: Root) -> Root: ...
    def visit_graph(self, obj: Graph) -> Graph: ...

class GraphQLIntrospection(GraphTransformer):
    __directives__: t.Tuple[Directive, ...]
    def __init__(self, query_graph: Graph, mutation_graph: t.Optional[Graph] = ...) -> None: ...
    def __type_name__(self, node_name: t.Optional[str]) -> Field: ...
    def __introspection_graph__(self) -> Graph: ...
    def visit_node(self, obj: Node) -> Node: ...
    def visit_root(self, obj: Root) -> Root: ...
    def visit_graph(self, obj: Graph) -> Graph: ...

class AsyncGraphQLIntrospection(GraphQLIntrospection):
    def __type_name__(self, node_name: t.Optional[str]) -> Field: ...
    def __introspection_graph__(self) -> Graph: ...
