from _typeshed import Incomplete
from collections.abc import Generator

class ImmutableDict(dict):
    def __hash__(self): ...
    __delitem__: Incomplete
    __setitem__: Incomplete
    clear: Incomplete
    pop: Incomplete
    popitem: Incomplete
    setdefault: Incomplete
    update: Incomplete

class Symbol(str):
    def __eq__(self, other): ...
    def __hash__(self): ...

class Keyword(str):
    def __eq__(self, other): ...
    def __hash__(self): ...

class List(tuple): ...
class Tuple(tuple): ...
class Dict(ImmutableDict): ...
class Set(frozenset): ...

class TaggedElement:
    name: Incomplete
    value: Incomplete
    def __init__(self, name, value) -> None: ...
    def __eq__(self, other): ...

def coroutine(func): ...
def appender(lst) -> Generator[None, Incomplete, None]: ...
def inst_handler(time_string): ...

TAG_HANDLERS: Incomplete
STOP_CHARS: str

def tag_handler(tag_name, tag_handlers) -> Generator[Incomplete, Incomplete, None]: ...
def character_handler() -> Generator[Incomplete, Incomplete, None]: ...
def parse_number(s): ...
def number_handler(s) -> Generator[Incomplete, Incomplete, None]: ...
def symbol_handler(s) -> Generator[Incomplete, Incomplete, None]: ...
def parser(target, tag_handlers, stop: Incomplete | None = ...) -> Generator[None, Incomplete, None]: ...
def loads(s, tag_handlers: Incomplete | None = ...): ...
def dumps(obj, default: Incomplete | None = ..., ensure_ascii: bool = ...): ...
