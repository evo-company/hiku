from ..types import CallableMeta as CallableMeta
from .core import THIS as THIS
from .nodes import Keyword as Keyword, Symbol as Symbol
from _typeshed import Incomplete
from collections.abc import Generator

class Environ:
    vars: Incomplete
    def __init__(self) -> None: ...
    def __getitem__(self, key): ...
    def __contains__(self, key): ...
    def push(self, names) -> Generator[None, None, None]: ...

class ExpressionCompiler:
    ctx_var: str
    env_var: str
    env: Incomplete
    def __init__(self) -> None: ...
    @classmethod
    def compile_expr(cls, node): ...
    @classmethod
    def compile_lambda_expr(cls, node, args: Incomplete | None = ...): ...
    def visit(self, node): ...
    def generic_visit(self, node): ...
    def visit_get_expr(self, node): ...
    def visit_if_expr(self, node): ...
    def visit_if_some_expr(self, node): ...
    def visit_each_expr(self, node): ...
    def visit_tuple(self, node): ...
    def visit_symbol(self, node): ...
    def visit_list(self, node): ...
    def visit_dict(self, node): ...
