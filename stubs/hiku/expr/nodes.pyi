from _typeshed import Incomplete

class Node:
    def accept(self, visitor) -> None: ...

class Symbol(Node):
    name: Incomplete
    def __init__(self, name) -> None: ...
    def accept(self, visitor): ...

class Keyword(Node):
    name: Incomplete
    def __init__(self, name) -> None: ...
    def accept(self, visitor): ...

class Tuple(Node):
    values: Incomplete
    def __init__(self, values) -> None: ...
    def accept(self, visitor): ...

class List(Node):
    values: Incomplete
    def __init__(self, values) -> None: ...
    def accept(self, visitor): ...

class Dict(Node):
    values: Incomplete
    def __init__(self, values) -> None: ...
    def accept(self, visitor): ...

class NodeVisitor:
    def visit(self, node) -> None: ...
    def generic_visit(self, node) -> None: ...
    def visit_symbol(self, node) -> None: ...
    def visit_keyword(self, node) -> None: ...
    def visit_tuple(self, node) -> None: ...
    def visit_list(self, node) -> None: ...
    def visit_dict(self, node) -> None: ...

class NodeTransformer:
    def visit(self, node): ...
    def generic_visit(self, node): ...
    def visit_symbol(self, node): ...
    def visit_keyword(self, node): ...
    def visit_tuple(self, node): ...
    def visit_list(self, node): ...
    def visit_dict(self, node): ...
