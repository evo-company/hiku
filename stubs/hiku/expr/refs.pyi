from ..query import Field as Field, Link as Link, Node as Node, merge as merge
from ..types import GenericMeta as GenericMeta, MappingMeta as MappingMeta, OptionalMeta as OptionalMeta, RecordMeta as RecordMeta, SequenceMeta as SequenceMeta, get_type as get_type
from .nodes import NodeVisitor as NodeVisitor
from _typeshed import Incomplete

class Ref:
    backref: Incomplete
    to: Incomplete
    def __init__(self, backref, to) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class NamedRef(Ref):
    name: Incomplete
    def __init__(self, backref, name, to) -> None: ...

def ref_to_req(types, ref, add_req: Incomplete | None = ...): ...
def type_to_query(type_): ...

class RequirementsExtractor(NodeVisitor):
    def __init__(self, types) -> None: ...
    @classmethod
    def extract(cls, types, expr): ...
    def visit(self, node) -> None: ...
    def visit_tuple(self, node) -> None: ...
