import sqlalchemy
from ..engine import Context as Context, pass_context as pass_context
from ..graph import Field as Field, Link as Link, Many as Many, Maybe as Maybe, Nothing as Nothing, One as One
from ..query import Field as QueryField
from ..types import Integer as Integer, IntegerMeta as IntegerMeta, String as String, StringMeta as StringMeta
from _typeshed import Incomplete
from sqlalchemy.engine import RowProxy as RowProxy
from sqlalchemy.sql import Select as Select
from sqlalchemy.sql.elements import BinaryExpression as BinaryExpression
from typing import Any, Callable, Iterable, List, Optional, Tuple

class FieldsQuery:
    engine_key: Incomplete
    from_clause: Incomplete
    primary_key: Incomplete
    def __init__(self, engine_key: str, from_clause: sqlalchemy.Table, *, primary_key: Optional[sqlalchemy.Column] = ...) -> None: ...
    def __postprocess__(self, field: Field) -> None: ...
    def in_impl(self, column: sqlalchemy.Column, values: Iterable) -> BinaryExpression: ...
    def select_expr(self, fields_: List[QueryField], ids: Iterable) -> Tuple[Select, Callable]: ...
    def __call__(self, ctx: Context, fields_: List[QueryField], ids: List) -> Any: ...

class LinkQuery:
    engine_key: Incomplete
    from_column: Incomplete
    to_column: Incomplete
    def __init__(self, engine_key: str, *, from_column: sqlalchemy.Column, to_column: sqlalchemy.Column) -> None: ...
    def __postprocess__(self, link: Link) -> None: ...
    def in_impl(self, column: sqlalchemy.Column, values: Iterable) -> BinaryExpression: ...
    def select_expr(self, ids: Iterable) -> Optional[Select]: ...
    def __call__(self, result_proc: Callable, ctx: Context, ids: Iterable) -> Any: ...
