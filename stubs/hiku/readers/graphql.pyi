import enum
from ..query import Field as Field, Link as Link, Node as Node, merge as merge
from _typeshed import Incomplete
from graphql.language import ast
from typing import Any, Dict, Iterator, List, Optional, Union

class NodeVisitor:
    def visit(self, obj: ast.Node) -> Any: ...
    def visit_document(self, obj: ast.DocumentNode) -> None: ...
    def visit_operation_definition(self, obj: ast.OperationDefinitionNode) -> Any: ...
    def visit_fragment_definition(self, obj: ast.FragmentDefinitionNode) -> Any: ...
    def visit_selection_set(self, obj: ast.SelectionSetNode) -> Any: ...
    def visit_field(self, obj: ast.FieldNode) -> Any: ...
    def visit_fragment_spread(self, obj: ast.FragmentSpreadNode) -> Any: ...
    def visit_inline_fragment(self, obj: ast.InlineFragmentNode) -> Any: ...

class OperationGetter(NodeVisitor):
    def __init__(self, operation_name: Optional[str] = ...) -> None: ...
    @classmethod
    def get(cls, doc: ast.DocumentNode, operation_name: Optional[str] = ...) -> ast.OperationDefinitionNode: ...
    def visit_fragment_definition(self, obj: ast.FragmentDefinitionNode) -> None: ...
    def visit_operation_definition(self, obj: ast.OperationDefinitionNode) -> None: ...

class FragmentsCollector(NodeVisitor):
    fragments_map: Incomplete
    def __init__(self) -> None: ...
    def visit_operation_definition(self, obj: ast.OperationDefinitionNode) -> None: ...
    def visit_fragment_definition(self, obj: ast.FragmentDefinitionNode) -> None: ...

class SelectionSetVisitMixin:
    def transform_fragment(self, name: str) -> List[Union[Field, Link]]: ...
    @property
    def query_variables(self) -> Optional[Dict]: ...
    @property
    def query_name(self) -> Optional[str]: ...
    def lookup_variable(self, name: str) -> Any: ...
    def visit_selection_set(self, obj: ast.SelectionSetNode) -> Iterator[Union[Field, Link]]: ...
    def visit_field(self, obj: ast.FieldNode) -> Iterator[Union[Field, Link]]: ...
    def visit_variable(self, obj: ast.VariableNode) -> Any: ...
    def visit_null_value(self, obj: ast.NullValueNode) -> None: ...
    def visit_int_value(self, obj: ast.IntValueNode) -> int: ...
    def visit_float_value(self, obj: ast.FloatValueNode) -> float: ...
    def visit_string_value(self, obj: ast.StringValueNode) -> str: ...
    def visit_boolean_value(self, obj: ast.BooleanValueNode) -> bool: ...
    def visit_enum_value(self, obj: ast.EnumValueNode) -> str: ...
    def visit_list_value(self, obj: ast.ListValueNode) -> List: ...
    def visit_object_value(self, obj: ast.ObjectValueNode) -> Dict: ...
    def visit_fragment_spread(self, obj: ast.FragmentSpreadNode) -> Iterator[Union[Field, Link]]: ...
    def visit_inline_fragment(self, obj: ast.InlineFragmentNode) -> Iterator[Union[Field, Link]]: ...

class FragmentsTransformer(SelectionSetVisitMixin, NodeVisitor):
    query_name: str
    query_variables: Dict
    fragments_map: Incomplete
    cache: Incomplete
    pending_fragments: Incomplete
    def __init__(self, document: ast.DocumentNode, query_name: str, query_variables: Dict) -> None: ...
    def transform_fragment(self, name: str) -> List[Union[Field, Link]]: ...
    def visit_operation_definition(self, obj: ast.OperationDefinitionNode) -> None: ...
    def visit_fragment_definition(self, obj: ast.FragmentDefinitionNode) -> List[Union[Field, Link]]: ...

class GraphQLTransformer(SelectionSetVisitMixin, NodeVisitor):
    query_name: Optional[str]
    query_variables: Optional[Dict[str, Any]]
    fragments_transformer: Incomplete
    document: Incomplete
    variables: Incomplete
    def __init__(self, document: ast.DocumentNode, variables: Optional[Dict] = ...) -> None: ...
    @classmethod
    def transform(cls, document: ast.DocumentNode, op: ast.OperationDefinitionNode, variables: Optional[Dict] = ...) -> Node: ...
    def transform_fragment(self, name: str) -> List[Union[Field, Link]]: ...
    def visit_operation_definition(self, obj: ast.OperationDefinitionNode) -> Node: ...

def read(src: str, variables: Optional[Dict] = ..., operation_name: Optional[str] = ...) -> Node: ...

class OperationType(enum.Enum):
    QUERY: Incomplete
    MUTATION: Incomplete
    SUBSCRIPTION: Incomplete

class Operation:
    type: Incomplete
    query: Incomplete
    name: Incomplete
    def __init__(self, type_: OperationType, query: Node, name: Optional[str] = ...) -> None: ...

def read_operation(src: str, variables: Optional[Dict] = ..., operation_name: Optional[str] = ...) -> Operation: ...
