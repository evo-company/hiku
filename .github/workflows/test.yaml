name: Test
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

env:
  PDM_VERSION: 2.22.3
  PYTHON_VERSION: 3.9

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up PDM
        run: pip install pdm==${{ env.PDM_VERSION }}
      - name: Install dependencies
        run: |
          pdm sync -d -G test -G dev
          pip install tox tox-pdm tox-gh-actions
      - name: Run flake8
        if: ${{ matrix.python-version == env.PYTHON_VERSION }}
        run: pdm run flake
      - name: Run mypy
        if: ${{ matrix.python-version == env.PYTHON_VERSION }}
        run: pdm run mypy
      - name: Run black
        if: ${{ matrix.python-version == env.PYTHON_VERSION }}
        run: pdm run fmt --check
      - name: Run unit tests
        run: tox run -- --cov-report=term

  test-db:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Lets
        uses: lets-cli/lets-action@v1.1
        with:
          version: latest
      - name: Test database integration
        run: timeout 600 lets test-pg

  federation-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Lets
        uses: lets-cli/lets-action@v1.1
        with:
          version: latest
      - name: Test federation compatibility
        run: timeout 600 lets federation-compatibility-test
